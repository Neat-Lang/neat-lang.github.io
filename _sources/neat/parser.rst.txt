.. _neat_parser:
.. highlight:: d

neat.parser
-----------

.. c:namespace:: neat.parser

Module entries: :class:`Loc`, :class:`ParserImpl`, :func:`find`, :func:`isDigit`, :func:`isHexDigit`, :func:`isWhitespace`, :func:`parseBinaryNumber`, :func:`parseFloat`, :func:`parseHexNumber`, :func:`parseNumber`, :func:`precomputeStripTargets`, :func:`startsWith`, :func:`utf8Decode`, :func:`utf8NextLength`

.. class:: Loc

    TODO: document

    .. method:: toBackendLoc(fileIdTable)

        `BackendLocation toBackendLoc(FileIdTable fileIdTable)`


    .. method:: location()

        `string location()`


    .. method:: fail(message)

        `Error fail(string message)`


    .. method:: locRange()

        `LocRange locRange()`


    .. method:: assert(flag, message)

        `(void | fail Error) assert(bool flag, string message)`


    .. method:: hardCheck(flag, message)

        `void hardCheck(bool flag, string message)`

        This should have been caught earlier.

    .. method:: assert2s2(test, a, b)

        `(void | fail Error) assert2s2(int test, string a, string b)`


    .. method:: assert2s3(test, a, b, c)

        `(void | fail Error) assert2s3(int test, string a, string b, string c)`


    .. method:: assert2s4(test, a, b, c, d)

        `(void | fail Error) assert2s4(int test, string a, string b, string c, string d)`


    .. method:: assert2s5(test, a, b, c, d, e)

        `(void | fail Error) assert2s5(int test, string a, string b, string c, string d, string e)`


.. class:: ParserImpl

    TODO: document

    .. method:: this(filename, fileId, fulltext, tokens)

        `this(this.filename, this.fileId, this.fulltext, this.tokens)`


    .. method:: loc()

        `LocRange loc()`


    .. method:: from()

        `LocRange from()`


    .. method:: to(from)

        `LocRange to(LocRange from)`


    .. method:: verifyTransactions(msg, dg)

        `(void | fail Error) verifyTransactions(string msg, (void | fail Error) delegate() dg)`


    .. method:: parseIdentifier()

        `string parseIdentifier()`


    .. method:: verify()

        `void verify()`


    .. method:: text()

        `string text()`


    .. method:: acceptToken(type)

        `bool acceptToken(TokenType type)`


    .. method:: acceptToken2(first, second)

        `bool acceptToken2(TokenType first, TokenType second)`


    .. method:: acceptToken3(first, second, third)

        `bool acceptToken3(TokenType first, TokenType second, TokenType third)`


    .. method:: acceptToken2Not(match, nomatch)

        `bool acceptToken2Not(TokenType match, TokenType nomatch)`


    .. method:: acceptToken2Not2(match, nomatch1, nomatch2)

        `bool acceptToken2Not2(TokenType match, TokenType nomatch1, TokenType nomatch2)`


    .. method:: acceptTokenStr(type)

        `(string | :none) acceptTokenStr(TokenType type)`


    .. method:: acceptIdentifier(identifier)

        `bool acceptIdentifier(string identifier)`


    .. method:: expectToken(type)

        `(void | Error) expectToken(TokenType type)`


    .. method:: begin()

        `void begin()`


    .. method:: commit()

        `void commit()`


    .. method:: revert()

        `void revert()`


    .. method:: peekToken(tokenType)

        `bool peekToken(TokenType tokenType)`


    .. method:: dropToken()

        `void dropToken()`


    .. method:: accept(match)

        `bool accept(string match)`


    .. method:: hard_eof()

        `bool hard_eof()`

        ie. no more text at all.

    .. method:: eof()

        `bool eof()`

        ie. no more meaningful content; only comments and whitespace.

    .. method:: strip()

        `void strip()`


    .. method:: parseLastComment()

        `string parseLastComment()`

        Accept many comments; return the last one.

    .. method:: fail(message)

        `Error fail(string message)`


    .. method:: parseNumber()

        `(:failure | (:success, long, bool withBasePrefix) | fail Error) parseNumber()`


    .. method:: assert2s2(test, a, b)

        `(void | fail Error) assert2s2(int test, string a, string b)`


    .. method:: assert2s3(test, a, b, c)

        `(void | fail Error) assert2s3(int test, string a, string b, string c)`


    .. method:: assert2s4(test, a, b, c, d)

        `(void | fail Error) assert2s4(int test, string a, string b, string c, string d)`


    .. method:: assert2s5(test, a, b, c, d, e)

        `(void | fail Error) assert2s5(int test, string a, string b, string c, string d, string e)`


.. function:: find(haystack, needle)

    `int find(string haystack, string needle)`

    TODO: document

.. function:: isDigit(ch)

    `bool isDigit(int ch)`

    TODO: document

.. function:: isHexDigit(digit)

    `bool isHexDigit(char digit)`

    TODO: document

.. function:: isWhitespace(c)

    `bool isWhitespace(char c)`

    TODO: document

.. function:: parseBinaryNumber(number, negative)

    `(:failure | (:success, long value)) parseBinaryNumber(string number, bool negative)`

    TODO: document

.. function:: parseFloat(parser)

    `(:failure | (:success, float) | (:success, double) | fail Error) parseFloat(Parser parser)`

    TODO: document

.. function:: parseHexNumber(number, negative)

    `(:failure | (:success, long value)) parseHexNumber(string number, bool negative)`

    TODO: document

.. function:: parseNumber(parser)

    `(:failure | (:success, long, bool withBasePrefix) | fail Error) parseNumber(Parser parser)`

    TODO: document

.. function:: precomputeStripTargets(tokens)

    `int[] precomputeStripTargets(Token[] tokens)`

    TODO: document

.. function:: startsWith(haystack, needle)

    `bool startsWith(string haystack, string needle)`

    TODO: document

.. function:: utf8Decode(ch)

    `int utf8Decode(string ch)`

    TODO: document

.. function:: utf8NextLength(text)

    `int utf8NextLength(string text)`

    TODO: document
