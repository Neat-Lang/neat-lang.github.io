.. _std_algorithm:
.. highlight:: d

std.algorithm
-------------

.. c:namespace:: std.algorithm

Module entries: :func:`all`, :func:`any`, :func:`array`, :func:`cumulativeFold`, :func:`filter`, :func:`map`, :func:`sort`

.. function:: all(left, right)

    `bool all(T, U)(T left, U right)`

    Returns true if all values in the range fulfill the condition.

    Example::

        assert((0 .. 5).all(a => a < 5));

.. function:: any(left, right)

    `bool any(T, U)(T left, U right)`

    Returns true if any value in the range fulfills the condition.

    Example::

        assert((0 .. 5).any(a => a == 3));

.. function:: array(range)

    `typeof(range.front)[] array(T)(T range)`

    Converts a range into an array.

    Example::

        assert((0 .. 5).array == [0, 1, 2, 3, 4]);

.. function:: cumulativeFold(range, seed, lambda)

    `auto cumulativeFold(R, S, L)(R range, S seed, L lambda)`

    Applies a lambda repeatedly to an initial value and a value from a range, yielding the result at every step.

    Example::

        assert((1 .. 6).cumulativeFold(0, (a, b) => a + b).array == [1, 3, 6, 10, 15]);

.. function:: filter(left, right)

    `auto filter(T, U)(T left, U right)`

    Filters a range by a condition.

    Example::

        auto a = (0 .. 10).filter(a => a > 4).array;

        assert(a == [5, 6, 7, 8, 9]);

.. function:: map(left, right)

    `auto map(T, U)(T left, U right)`

    Maps a range onto a lambda.

    If the input range is `[x, y, z]`,
    the output range is `[lambda(x), lambda(y), lambda(z)]`.

    Example::

        auto a = (0 .. 5).map(a => a * 2);

        assert(a.length == 5);
        assert(a.array == [0, 2, 4, 6, 8]);

.. function:: sort(array, smaller)

    `T sort(T, U)(T array, U smaller)`

    TODO: document
